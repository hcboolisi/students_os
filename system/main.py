# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QMainWindow

from baseinfo import student, result
from query import studentinfo, resultinfo
from settings import grade, classes, examkinds, subject
from service import service
import main_img_rc
from system import user


class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super(Ui_MainWindow, self).__init__()
#        MainWindow.setWindowFlags(QtCore.Qt.MSWindowsFixedSizeDialogHint)
#        MainWindow.setWindowFlags(Qt.FramelessWindowHint)
        self.setupUi(self)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(932, 640)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../images/appstu.ICO"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("border-image: url(:/png/主窗口图片1.jpg);")
        self.centralwidget.setObjectName("centralwidget")
        MainWindow.setCentralWidget(self.centralwidget)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        datetime = QtCore.QDateTime.currentDateTime()
        time = datetime.toString("yyyy-MM-dd HH:mm:ss")
        self.statusbar.showMessage("当前登录用户：" + service.userName +
                                   "       登录时间：" + time +
                                   "       版权所有：黄朝斌", 0)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 932, 29))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.menubar.setFont(font)
        self.menubar.setObjectName("menubar")

        self.menu = QtWidgets.QMenu(self.menubar)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.menu.setFont(font)
        self.menu.setObjectName("menu")
        self.menu.triggered[QtWidgets.QAction].connect(self.openSet)

        self.menu_2 = QtWidgets.QMenu(self.menubar)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.menu_2.setFont(font)
        self.menu_2.setObjectName("menu_2")
        self.menu_2.triggered[QtWidgets.QAction].connect(self.openSet_2)

        self.menu_3 = QtWidgets.QMenu(self.menubar)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.menu_3.setFont(font)
        self.menu_3.setObjectName("menu_3")
        self.menu_3.triggered[QtWidgets.QAction].connect(self.openSet_3)

        self.menu_4 = QtWidgets.QMenu(self.menubar)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.menu_4.setFont(font)
        self.menu_4.setObjectName("menu_4")
        self.menu_4.triggered[QtWidgets.QAction].connect(self.openSet_4)

        MainWindow.setMenuBar(self.menubar)

        self.actionJLKJ = QtWidgets.QAction(MainWindow)
        self.actionJLKJ.setObjectName("actionJLKJ")
        self.actionsdf = QtWidgets.QAction(MainWindow)
        self.actionsdf.setObjectName("actionsdf")
        self.actionkaoshi_ke = QtWidgets.QAction(MainWindow)
        self.actionkaoshi_ke.setObjectName("actionkaoshi_ke")
        self.actionkaoshi = QtWidgets.QAction(MainWindow)
        self.actionkaoshi.setObjectName("actionkaoshi")
        self.action1 = QtWidgets.QAction(MainWindow)
        self.action1.setObjectName("action1")
        self.action2 = QtWidgets.QAction(MainWindow)
        self.action2.setObjectName("action2")
        self.action1_2 = QtWidgets.QAction(MainWindow)
        self.action1_2.setObjectName("action1_2")
        self.action2_2 = QtWidgets.QAction(MainWindow)
        self.action2_2.setObjectName("action2_2")
        self.action1_3 = QtWidgets.QAction(MainWindow)
        self.action1_3.setObjectName("action1_3")

        self.menu.addAction(self.actionJLKJ)
        self.menu.addAction(self.actionsdf)
        self.menu.addAction(self.actionkaoshi_ke)
        self.menu.addAction(self.actionkaoshi)

        self.menu_2.addAction(self.action1)
        self.menu_2.addAction(self.action2)

        self.menu_3.addAction(self.action1_2)
        self.menu_3.addAction(self.action2_2)

        self.menu_4.addAction(self.action1_3)

        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())
        self.menubar.addAction(self.menu_3.menuAction())
        self.menubar.addAction(self.menu_4.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "学生成绩管理系统"))
        self.menu.setTitle(_translate("MainWindow", "基础设置"))
        self.menu_2.setTitle(_translate("MainWindow", "基本信息管理"))
        self.menu_3.setTitle(_translate("MainWindow", "系统查询"))
        self.menu_4.setTitle(_translate("MainWindow", "系统管理"))
        self.actionJLKJ.setText(_translate("MainWindow", "年级设置"))
        self.actionsdf.setText(_translate("MainWindow", "班级设置"))
        self.actionkaoshi_ke.setText(_translate("MainWindow", "考试科目设置"))
        self.actionkaoshi.setText(_translate("MainWindow", "考试类别"))
        self.action1.setText(_translate("MainWindow", "学生信息管理"))
        self.action2.setText(_translate("MainWindow", "成绩管理"))
        self.action1_2.setText(_translate("MainWindow", "学生信息查询"))
        self.action2_2.setText(_translate("MainWindow", "学生成绩查询"))
        self.action1_3.setText(_translate("MainWindow", "用户信息维护"))

    def openSet(self, m):
        if m.text() == "年级设置":
            self.m = grade.Ui_widget()
        elif m.text() == "班级设置":
            self.m = classes.Ui_Form()
        elif m.text() == "考试科目设置":
            self.m = subject.Ui_widget()
        elif m.text() == "考试类别设置":
            self.m = examkinds.Ui_widget()
        self.m.show()
        datetime = QtCore.QDateTime.currentDateTime()
        time = datetime.toString("yyyy-MM-dd HH:mm:ss")
        self.statusbar.showMessage("当前操作：" + m.text() +
                                "       操作时间：" + time +
                                "       版权所有：黄朝斌", 0)

    def openSet_2(self, m):
        if m.text() == "学生信息管理":
            self.m = student.Ui_MainWindow()
        elif m.text() == "成绩管理":
            self.m = result.Ui_MainWindow()
        self.m.show()
        datetime = QtCore.QDateTime.currentDateTime()
        time = datetime.toString("yyyy-MM-dd HH:mm:ss")
        self.statusbar.showMessage("当前操作：" + m.text() +
                                "       操作时间：" + time +
                                "       版权所有：黄朝斌", 0)

    def openSet_3(self, m):
        if m.text() == "学生信息查询":
            self.m = studentinfo.Ui_MainWindow()
        elif m.text() == "学生成绩查询":
            self.m = resultinfo.Ui_MainWindow()
        self.m.show()
        datetime = QtCore.QDateTime.currentDateTime()
        time = datetime.toString("yyyy-MM-dd HH:mm:ss")
        self.statusbar.showMessage("当前操作：" + m.text() +
                                   "       操作时间：" + time +
                                   "       版权所有：黄朝斌", 0)

    def openSet_4(self, m):
        if m.text() == "用户信息维护":
            self.m = user.Ui_MainWindow()
        self.m.show()
        datetime = QtCore.QDateTime.currentDateTime()
        time = datetime.toString("yyyy-MM-dd HH:mm:ss")
        self.statusbar.showMessage("当前操作：" + m.text() +
                                   "       操作时间：" + time +
                                   "       版权所有：黄朝斌", 0)

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())